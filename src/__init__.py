"""
The schemas module
"""

from typing import Literal, Union
# pylint: disable=no-name-in-module
from pydantic import BaseModel


Role = Union[Literal['user'], Literal['system'], Literal['assistant']]
"""
Type alias representing the role of the sender of a message in a
communication system.

The role must be one of `user`, `system`, or `assistant`.
"""


class Message(BaseModel):
    """
    A class representing a message that can be sent by a user, system,
    or assistant in a communication system.

    Attributes:
    -----------
    role: Role
        The role of the sender of the message. Must be one of `user`, `system`,
        or `assistant`.
    content: str
        The actual message content.
    """
    role: Role
    content: str

    def __repr__(self) -> str:
        """
        Return a string representation of the Message object.

        Returns:
        --------
        str
            A string representation of the Message object in the format
            '<Message from="<role>" content="<content>">'
        """
        return f'<Message from="{self.role}" content="{self.content}">'

    def __str__(self) -> str:
        """
        Return a string representation of the Message object.

        Returns:
        --------
        str
            A string representation of the Message object in the format
            '<role>: <content>'
        """
        return f'{self.role}: {self.content}'


class Choice(BaseModel):
    """
    A class representing a choice made by a user in a conversation.

    Attributes:
    -----------
    message: Message
        The message representing the API's choice.
    finish_reason: Union[str, None]
        The reason for ending the conversation. Must be one of `stop`,
        `length`, `content_filter`, or `None`.
    index: int
        The index of the choice in the list of available choices.
    """
    message: Message
    finish_reason: Union[
        Literal['stop'],
        Literal['length'],
        Literal['content_filter'],
        None,
    ]
    index: int


class Usage(BaseModel):
    """
    A class representing usage statistics for an AI language model.

    Attributes:
    -----------
    prompt_tokens: int
        The number of tokens in the prompt provided to the model.
    completion_tokens: int
        The number of tokens generated by the model as the completion.
    total_tokens: int
        The total number of tokens used by the model for generating the
        completion.
    """
    prompt_tokens: int
    completion_tokens: int
    total_tokens: int


class Response(BaseModel):
    """
    A class representing the response returned by an AI language model.

    Attributes:
    -----------
    id: str
        The ID of the response.
    object: str
        The type of the response object.
    created: int
        The timestamp indicating when the response was created.
    model: str
        The name of the AI language model that generated the response.
    usage: Usage
        The usage statistics for the AI language model.
    choices: list[Choice]
        A list of choices made by the API during the conversation.
    """
    id: str
    object: str
    created: int
    model: str
    usage: Usage
    choices: list[Choice]


class Prompt(Message):
    """
    A class representing a prompt message used for input to an AI language
    model.

    Inherits from:
    --------------
    Message
    """

    def __repr__(self) -> str:
        """
        Return a string representation of the Prompt object.

        Returns:
        --------
        str
            A string representation of the Prompt object in the format
            '<Prompt from="<role>" content="<content>">'
        """
        return f'<Prompt from="{self.role}" content="{self.content}">'
